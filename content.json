{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"书单","date":"2019-12-26T14:47:47.704Z","updated":"2019-12-26T03:10:47.277Z","comments":false,"path":"books/index.html","permalink":"http://yoursite.com/books/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-12-27T03:42:43.000Z","updated":"2019-12-27T04:17:55.884Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-12-26T14:46:39.745Z","updated":"2019-12-26T03:10:47.277Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-12-27T02:30:24.000Z","updated":"2019-12-27T04:17:03.940Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2019-12-27T04:28:53.000Z","updated":"2019-12-27T12:01:07.161Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"orcale","slug":"orcale","date":"2020-01-01T14:49:01.000Z","updated":"2020-01-01T14:50:25.458Z","comments":true,"path":"2020/01/01/orcale/","link":"","permalink":"http://yoursite.com/2020/01/01/orcale/","excerpt":"","text":"orcale 数据库 主流的关系型数据库 oracle 产品免费，服务收费，强大的稳定性 安全性 12345oracle 版本 oracle 8i&#x2F;9i: internetoracle 10g&#x2F;11g grid网格计算,提高访问速度，避免舍近求远的问题oracle12c cloud 云计算各版本学习和研发没有区别，最终的部署和运维时差异较大 mysql community 免费，企业版收费 产品免费，服务收费 sql server 微软开发，强大的图形化工具，方便使用 db2 适用于多个操作系统多个硬件 增删改查（CRUD） oracle数据库服务器 2.1 基于关系型数据库（RDBMS）(二维表,：关系型) ​ 非关系型： NoSQL,redis/mongodb :基于key-value 2.2 组成结构 ​ 一个PGA对应一个客户端 ​ 两段提交：减少访问数据库次数 ​ pga-&gt;sga ​ sga-&gt;数据库","categories":[{"name":"Database","slug":"Database","permalink":"http://yoursite.com/categories/Database/"}],"tags":[{"name":"orcale","slug":"orcale","permalink":"http://yoursite.com/tags/orcale/"},{"name":"Database","slug":"Database","permalink":"http://yoursite.com/tags/Database/"}]},{"title":"C/C++开源项目","slug":"opensource","date":"2020-01-01T14:46:45.000Z","updated":"2020-01-01T14:48:15.273Z","comments":true,"path":"2020/01/01/opensource/","link":"","permalink":"http://yoursite.com/2020/01/01/opensource/","excerpt":"","text":"C/C++开源项目1.cJSON1.1 JSON 语法 ​ JSON语法是 JavaScript 对象表示法语法的子集。数据在键/值对中；数据由逗号分隔；花括号保存对象， 也称一个文档对象；方括号保存数组， 每个数组成员用逗号隔开， 并且每个数组成员可以是文档对象或者数组或者键值对 。 1.2 JSON基于两种结构： “名称/值”对的集合（A collection of name/value pairs）。不同的编程语言中，它被理解为对象（object），纪录（record），结构（struct），字（dictionary），哈希表（hashtable），有键列表（keyed list），或者关联数组 （associative array）。 ​ 值的有序列表（An ordered list of values）。在大部分语言中，它被实现为数组（array），矢量（vector），列表（list），序列（sequence）。 1.3 JSON的三种语法： 键/值对 key:value，用半角冒号分割。 比如 “name”:”Faye”文档对象 JSON对象写在花括号中，可以包含多个键/值对。比如{ “name”:”Faye” ,”address”:”北京” }。数组 JSON 数组在方括号中书写： 数组成员可以是对象，值，也可以是数组(只要有意义)。 {“love”: [“乒乓球”,”高尔夫”,”斯诺克”,”羽毛球”,”LOL”,”撩妹”]} 1.4如何在自己的项目中使用cJSON 123456cjson网址：https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;cjson&#x2F;Tinyhttpd网址：https:&#x2F;&#x2F;github.com&#x2F;EZLippi&#x2F;Tinyhttpd&#x2F;blob&#x2F;master&#x2F;httpd.cMyTinySTL网址：https:&#x2F;&#x2F;github.com&#x2F;Alinshans&#x2F;MyTinySTLoatpp网址：https:&#x2F;&#x2F;github.com&#x2F;oatpp&#x2F;oatpp &#x2F;&#x2F; web服务器Redis网址：https:&#x2F;&#x2F;redis.io&#x2F;download &#x2F;&#x2F;缓存数据库nginx网址：http:&#x2F;&#x2F;nginx.org&#x2F;","categories":[{"name":"开源","slug":"开源","permalink":"http://yoursite.com/categories/%E5%BC%80%E6%BA%90/"}],"tags":[{"name":"C/C++","slug":"C-C","permalink":"http://yoursite.com/tags/C-C/"},{"name":"开源","slug":"开源","permalink":"http://yoursite.com/tags/%E5%BC%80%E6%BA%90/"}]},{"title":"Git","slug":"Git","date":"2020-01-01T14:42:14.000Z","updated":"2020-01-01T14:43:10.467Z","comments":true,"path":"2020/01/01/Git/","link":"","permalink":"http://yoursite.com/2020/01/01/Git/","excerpt":"","text":"Git1.1 Git 与 SVN SVN是集中式版本控制系统，版本库集中放在中央服务器， 缺点：服务器单点故障；容错性差 Git是分布式版本控制系统，分为两种类型的仓库，本地仓库和远程仓库 本地仓库 ：开发人员自己电脑上的Git仓库 远程仓库：远程服务器上的Git仓库 clone 克隆，将远程仓库复制到本地 push 推送，将本地仓库代码上传到远程仓库 pull 拉取 将远程仓库代码下载到本地仓库 1.2 Git 工作流程 从远程仓库克隆代码到本地仓库 从本地仓库中checkout代码后进行代码修改 在提交前先将代码提交到暂存区 提交到本地仓库。本地仓库中保存修改的各个历史版本 修改完成后，需要和团队成员共享代码，将代码push到远程仓库 1.3 Git代码托管服务 Git远程仓库，借助互联网上提供的一些代码托管服务来实现，GitHub、码云、GItLab gitHub 面向开源及私有软件项目的托管平台，，因只支持Git作为唯一的版本库格式进行托管，故名gitHub 码云gitee,国内的代码托管平台，速度较快 GitLab 用于仓库管理系统的开源项目，使用GIt作为代码管理工具，并在此基础上搭建起来的web服务。 1.4 GIt常用命令 环境配置 12345678设置用户信息，即设置当前你是谁，是用来标志的，不是用来认证校验的。任意写git config --global user.name &quot;用户名&quot;git config --global user.email &quot;用户邮箱地址&quot;查看配置信息git config --listgit config user.name设置的信息会保存在~&#x2F;.gitconfig 获取Git仓库 在本地初始化一个Git仓库 #git init 从远程克隆下来仓库 #git clone 远程地址 工作目录、暂存区以及版本库 版本库 .git隐藏文件夹就是Git的版本库，版本库中存储很多配置信息、日志信息和文件版本信息。用于版本管理、恢复、查看日志 工作目录(工作区)包含.git文件夹的目录就是工作目录，主要用于存放开发的代码 暂存区 .git文件夹中有很多文件，其中有一个index文件就是暂存区，也叫作stage。暂存区是一个临时保存修改文件的地方。 Git工作目录下文件的两种状态 untracked 未跟踪 （未被纳入版本控制） tracked 已跟踪（已被纳入版本控制） unmodified 未修改状态 modified 已修改状态 staged 已暂存状态 本地仓库操作 git status 查看当前状态","categories":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"printf(\" Hello World!\")","slug":"helloworld-md","date":"2019-12-27T02:50:39.000Z","updated":"2019-12-27T02:58:49.782Z","comments":true,"path":"2019/12/27/helloworld-md/","link":"","permalink":"http://yoursite.com/2019/12/27/helloworld-md/","excerpt":"","text":"填补上空白区域，使函数输出 hello world1234if( ? ) printf(&quot;hello&quot;);else printf(&quot;world&quot;); 解决思路 if分支只能执行一条 printf函数返回值为输出字符的数目 在if()内部利用printf()输出，条件语句为0（假），执行else语句 具体方法1、 if(!(printf(&quot;Hello&quot;)))2、 if(printf(&quot;Hello &quot;)！=6)","categories":[],"tags":[{"name":"C/C++","slug":"C-C","permalink":"http://yoursite.com/tags/C-C/"},{"name":"语法","slug":"语法","permalink":"http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"}]},{"title":"tmux","slug":"tmux","date":"2018-12-30T02:07:47.000Z","updated":"2019-12-30T06:46:26.728Z","comments":true,"path":"2018/12/30/tmux/","link":"","permalink":"http://yoursite.com/2018/12/30/tmux/","excerpt":"","text":"tmux 技巧与调整tmux 技巧与调整 ubuntu 下安装 1sudo apt-get tmux window 窗口 -c -new a window -&amp; -close current window -l -switch to last window -n -next window -p -previous window -w -show window menu list pane 窗格 -% -horizontal split 水平分屏 -“ - -x -close current pane -; -switch to last pane -o -move clockwise 逆时针切换窗格 C-o swap pane clockwise 逆时针切换窗格 configuration 1 tumx的配置文件 每当开启一个新的会话时，Tmux 都会先读取 ~/.tmux.conf 这个文件。该文件中存放的就是对 Tmux 的配置。 小提示：如果你希望新的配置项能够立即生效，那么你可以将下面这一行配置加入到文件~/.tmux.conf 中。 12# bind a reload keybind R source-file ~&#x2F;.tmux.conf ; display-message &quot;Config reloaded..&quot; 这样配置了之后，每当向 ~/.tmux.conf 文件中添加了新的配置，只需要按下 Ctrl-b r就可以重新加载配置并使新的配置生效，从而免去了开启一个新的会话。 4.2 tmux常用配置 123456789101112~&#x2F;.tmux.conf 文件中。# set new default prefix 修改主键(ctrl + c -&gt; ctrl +j)unbind C-bset-option -g prefix C-j#mouse 用鼠标切换窗格set-option -g -q mouse on#easy split pane commands 分割窗口按键bind h split-window -hbind v split-window -vunbind &#39;&quot;&#39;unbind % Tmux 中的复制粘贴及鼠标操作 5.1 仅开启鼠标支持 在.tmux.conf 中添加一行配置。 12#开启鼠标支持set-option -g mouse on 复制 按住shift键,然后拖动鼠标复制要选择的内容，然后按下shift+ctrl+c,复制到系统剪贴板 粘贴 按下shift+ctrl+v 粘贴系统剪贴板中的内容到tmux中 需要注意的是 shift+ctrl+v是在终端设置的粘贴快捷键 shift+ctrl+c是在终端设置的复制快捷键 5.2 如果想将在 Tmux 中发挥鼠标的威力，最好先将下面的设置打开: set -g mouse-resize-pane on set -g mouse-select-pane on set -g mouse-select-window on set -g mode-mouse on以上设置，将允许用鼠标选择面板、窗口，并允许手动修改面板的大小。其中最后一条命令，允许利用鼠标进入 cope-mode，可以直接在 tmux 中滚动历史，并选择文本将其复制到 tmux 的缓冲区中。当想要在其他面板或窗口中复制这段文本时，只需要使用复制命令 bindkey p 即可。这样，基本上 Tmux 内部的复制粘贴就都可以搞定。 这里有一个 trick，那就是在 tmux 中不论选择还是复制时，都按住 Shift 键，你会发现熟悉的中键又回来了 :-) 此外，还可以使用 Shift+Insert 快捷键将系统剪切板中的内容输入 tmux 中。 相对于 tmux 原生的选择模式（不加 shift 键），使用系统选择有个缺陷，即当一行内存在多个面板时，无法选择单个面板中的内容，这时就必须使用 tmux 自带的复制粘贴系统了。 参考连接木子三斤的blog","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"tmux","slug":"tmux","permalink":"http://yoursite.com/tags/tmux/"}]},{"title":"mosh","slug":"mosh","date":"2018-11-30T06:44:38.000Z","updated":"2019-12-30T06:46:03.056Z","comments":true,"path":"2018/11/30/mosh/","link":"","permalink":"http://yoursite.com/2018/11/30/mosh/","excerpt":"","text":"mosh1. mosh安装(ubuntu)12 sudo apt-get updatesudo apt-get install mosh 2.mosh 连接mosh 使用的UDP协议连接，使用的端口是从60000到61000 3. mosh的主要特点mosh是基于新的State Synchronization Protocol（SSP）协议，运行在UDP上，能同步不同主机对象的状态，加密和认证使用AES-128。当客户在WiFi网络中漫游或切换到3G网络，mosh能保持连接不断，在输入和删除命令时它能即时反馈，不会出现恼人的延迟 在高延迟的网络下，mosh比ssh流畅多了，而且在3G网络下，丢失网络变更IP后，终端连接不会中断。另外，mosh对编码的转换上，比其他终端有不少优势。","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"mosh","slug":"mosh","permalink":"http://yoursite.com/tags/mosh/"}]},{"title":"网络基础","slug":"net","date":"2018-09-30T06:46:38.000Z","updated":"2019-12-30T06:49:31.986Z","comments":true,"path":"2018/09/30/net/","link":"","permalink":"http://yoursite.com/2018/09/30/net/","excerpt":"","text":"网络1. 网络 以太网(Ethernet)计算机局域网络技术，目前应用最广。 2. 计算机网络的组成组件 节点 (node)：节点主要是具有网络地址(IP)的设备的统称 服务器主机(server)：就网络连接的方向来说，提供数据以“响应”给用户的主机，都可以被称为是一台服务器。 工作站(workstation)或客户端(client)：任何可以在计算机网络上输入的设备都可以是工作站，以连接发起的方向来说，主动发起连接去“请求”数据的，就可以称为客户端(client) 网卡(network interface card,NIC) 内置或外接在主机上面的一个设备，主要用于网络连接 网络接口： 利用软件设计出来的网络接口，主要是提供网络地址(ip)的任务。 网络形态或拓扑(topology)：各个节点在网络上的链接方式，一般讲的是物理连接方式 网关(gateway)：具有两个以上的网络接口，可以连接两个以上不同网段的设备 3. OSI七层协议 接收端和发送端，每一层只认识对方的同一层次的数据 传送过程 用户通过应用程序将数据放入第七层的包裹，再将第七层的包裹放到第六层的包裹内，依序一直放到第一层的最大的包裹内，然后传送出去给接收端。接收端的主机就得由第一个包裹开始，依序将每个包裹拆开，然后一个一个交给对应负责的层次来查看 包裹表面包含来自哪里、要去哪里、接受者是谁；包裹里面是真正的数据 OSI七层协议为一个网络模型(model)，并非硬性规定。这个七层协议可以协助软硬件开发简历一个基本的准则，且每一分层各自独立，方便开发者使用。 数据链路层里最重要的信息为MAC(Media Access Control)","categories":[{"name":"网络","slug":"网络","permalink":"http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"网络","slug":"网络","permalink":"http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"}]},{"title":"C语言内存分区和变量属性","slug":"memorypartition","date":"2018-03-20T12:25:11.000Z","updated":"2020-01-01T03:25:57.979Z","comments":true,"path":"2018/03/20/memorypartition/","link":"","permalink":"http://yoursite.com/2018/03/20/memorypartition/","excerpt":"","text":"C语言内存分区 代码区 data （全局初始化、静态初始化、常量） Bss（未初始化数据区） 栈区 堆区 变量的属性1、变量的分类1234567891011121314151617181920212223242526272829根据作用域：可分为全局变量和局部变量。根据生存周期：可分为静态存储方式和动态存储方式，具体地又分为自动的（auto）、静态的（static）、寄存器的（register）、外部的（extern）注、静态存储方式是指在程序运行期间分配固定的存储空间的方式。 动态存储方式是在程序运行期间根据需要进行动态的分配存储空间的方式动态变量和静态变量的区别：1、存储位置动态变量：存储在内存出栈数据区静态变量：存储在全局数据区（静态数据区）2、生命期动态变量：根据你定义的位置确定，比如你在一个函数中定义的，那么超出该函数范围变量将失效静态变量：程序结束时才释放3、作用域动态变量：同样的要根据你定义的位置才能确定，和第二点的一样静态变量：当前文件中有效 2、变量的作用域和存储类别的关系1234567891011每一个变量均有作用域和存储类别两个属性，这些属性共同用于描述一个变量，这些不同类型的变量与存储位置的关系如下：1、外部变量（全局变量）、静态外部变量、静态局部变量存储在静态存储区。2、自动局部变量（局部变量默认为自动局部变量）、函数形参存储在动态存储区（即栈区）。3、不论是静态存储区还是动态存储区均属于内存中的用户区。4、而寄存器变量是存储在CPU寄存器中的而不是内存中。 3、与作用域相关的几个属性：1234567局部变量：在一个函数内部定义的变量是内部变量，它只在本函数范围内有效，也就是说只有在本函数内才能使用它们，在此函数以外是不能使用这些变量的，这种类型的变量就称为“局部变量”。全局变量：在函数外定义的变量，可以为本源文件中其它函数所公用，有效范围为从定义变量的位置开始到本源文件结束，这种类型的变量就称为“全局变量”。 4、与存储类型相关的几个属性：1234567891011121314151617181920atuo：在声明局部变量时，若不指定 static，默认均是 auto，这类变量都是动态分配存储空间的，数据存储在动态存储区中。static：在声明局部变量时，使用关键字 static 将局部变量指定为“静态局部变量”，这样在函数调用结束后不消失而保留原值，即占用的存储单元不释放，在下一次函数调用时，该变量已有值就是上次函数调用结束时的值。register：在声明动态局部变量或者函数形参时，可将变量声明为register，这样编译系统就会为变量分配一个寄存器而不是内存空间，通过这种方式可提升对某些局部变量频繁调用的程序的性能。（寄存器运算速度远高于内存）extern：用于扩展全局变量的作用域。1)比如如果函数想引用一个外部变量，但该外部变量在该函数后定义，那么这个函数需要使用 extern 来声明变量，这样才能使用在该函数后面定义的全局变量。2)此外，extern 还可以在多文件的程序中声明外部变量。","categories":[{"name":"C/C++","slug":"C-C","permalink":"http://yoursite.com/categories/C-C/"}],"tags":[{"name":"C/C++","slug":"C-C","permalink":"http://yoursite.com/tags/C-C/"}]},{"title":"Markdown语法","slug":"languagemd","date":"2018-03-09T12:05:29.000Z","updated":"2019-12-27T12:37:37.277Z","comments":true,"path":"2018/03/09/languagemd/","link":"","permalink":"http://yoursite.com/2018/03/09/languagemd/","excerpt":"","text":"MARKDOWN语法一、标题#######一到六二、修辞与强调Some of these words are emphasized.//斜体Use two asterisks for strong emphasis.//加粗 三、列表 asd 项目 价格 收到 Computer $1600 sd Phone $12 Pipe $1 项目 价格 :——– ——–: Computer 1600 元 Phone 12 元 Pipe 1 元 1、asfa 2、asd 四、链接行内This is an example link. This is an example link. 参考I get 10 times more traffic from Google than fromYahoo or MSN. 五、图片CTRL+G 六、代码一个tab#include&lt;stdio.h&gt; int main() { int n;int i,sum=0; for(i=0;i&lt;3;i++) { scanf(&quot;%d&quot;,&amp;n); sum=sum+n; } printf(&quot;%.3f&quot;,sum/3.0); return 0; }三个反斜杠``代码高亮12345678910111213 #include&lt;stdio.h&gt; int main()&#123; int n;int i,sum&#x3D;0; for(i&#x3D;0;i&lt;3;i++) &#123; scanf(&quot;%d&quot;,&amp;n); sum&#x3D;sum+n; &#125; printf(&quot;%.3f&quot;,sum&#x2F;3.0); return 0; &#125;","categories":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/categories/Markdown/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"}]},{"title":"bash","slug":"bash","date":"2017-06-15T06:52:14.000Z","updated":"2020-01-01T03:24:20.728Z","comments":true,"path":"2017/06/15/bash/","link":"","permalink":"http://yoursite.com/2017/06/15/bash/","excerpt":"","text":"bash管理整个计算机硬件是操作系统的内核（Kernel）,内核需要保护，所以一般用户只能通过shell跟内核通信 1、shell通过shell将我们输入的命令与Kernel通信，让kernel控制硬件进行工作 1234例：当你需要计算机输出“音乐”时1、硬件： 需要你的硬件有“声卡芯片”2、内核管理：操作系统的内核可以支持整个芯片组，还需提供芯片的驱动程序3、应用程序： 用户输入发出声音的命令 2、bash shell history Tab alias job control foreground background shell script wildcard — 3、bash shell 的内置命令type通过type 命令可以知道命令是否为bash内置命令 1type name 4、shell的变量功能4.1 变量变量，让某一个特定的字符串代表不固定的内容，","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"bash","slug":"bash","permalink":"http://yoursite.com/tags/bash/"},{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"}]},{"title":"Linux-指令","slug":"Linux-指令","date":"2017-06-14T06:53:29.000Z","updated":"2020-01-01T14:46:59.529Z","comments":true,"path":"2017/06/14/Linux-指令/","link":"","permalink":"http://yoursite.com/2017/06/14/Linux-%E6%8C%87%E4%BB%A4/","excerpt":"","text":"linux 目录/bin:(binary) 存放二进制文件，给普通用户使用/sbin: shell bin 只能超级用户使用/etc: ()Linux 下所有配置文件,系统配置及用户安装的配置/home : 所有非root用户所有用户家目录的集合/root ：root用户的家目录/var:(variable 可变的) 存放日志文件，apache和nginx站点目录也会放在这个目录/usr: 用户自己安装的软件/boot: (boot 启动)linux引导启动时用到的一些文件/dev: (device设备)，光驱，U盘/lib: (library)/lost+found: 系统崩溃时的存放临时文件/proc :(process)过程进程/sys: (system)系统文件/temp: 临时文件 基本指令1)通用语法12$ 指令名称 【-选项】【操作目标】第一个被输入的数据绝对是命令或可执行文件 2)简单指令 ls指令 (list) ls [路径]列出指定路径下的文件夹和文件名称 clear == ctrl + l 清除屏幕中的命令 su 切换用户（用户名不写切换到root） cd change directory cd [路径] 绝对或相对路径 cd 切换到当前用户的家目录 pwd print working directory 3)文档操作指令 touch 文件的名字 路径 mkdir cp [-r] 需要复制的文档 需要保存的位置 -r 表示递归 mv 移动、剪切、重命名 mv 需要操作的文档 新的文档的位置 不需要 -r rm [-rf] 需要删除的文档 -r 表示递归 -f 表示强制 4）文档查看指令 tail (尾巴) 查看一个文件末多少行 tail -n 文件路径 -n不写 默认表示10行 head (头)查看一个文件头多少行 head -n 文件路径 -n不写 默认表示10行 cat 将内容全部输出到命令行中[正序] cat 文件路径1 文件路径2 文件路径3 tac 查看某文件的全部内容(倒序) tac 文件路径1 文件路径2 文件路径3 vim 打开文件，显示内容 vim 文件路径 5)关机 重启指令 sync 数据同步写入磁盘 reboot 重启计算机 普通用户无法执行 shutdown -h 时间now：立即关进 +m： (m表示minutes) halt 关闭内存 进阶指令 du (directory used) 显示出目录所占的磁盘空间大小情况；du -sh 目录路径 -s :表示sumary 汇总统计 -h：表示以较高可读性的形式显示 df (disk free),查看磁盘的剩余空间的情况。-h表示以较高可读性的形式显示 free 查看内存的使用情况。 free -m total :总计内存 used:已用内存 free：空闲 内存 share：共享内存 缓冲内存和缓存内存 find 根据条件查询文档的所在位置 #find 范围 选项 选项的值 -name ： 根据名字进行查询。支持通配符 * ,进行模糊查询 -type ： 根据文档的类型进行查询[d 表示文件夹，f表示普通文件，s表示套接字(sockets)，l表示连接文件(link快捷方式),c表示字符设备文件(character),b表示块状设备文件(block)] -user： 根据所有者进行查询 -group：根据所属的用户组 -size ：根据大小进行查询 ps (process show)查看进程 ps -ef -e ： 等价于 -A，all，全部 -f ：表示full，显示全部的列 UID： 进程的启动用户名 PID：process id进程的id PPID : parent process id 父级进程 C：表示cpu的使用情况STIME： start time 启动时间 TTY：终端的设备编号，”?”表示进程不是由终端发起的 TIME: 持续运行时间 CMD： command ,显示进程的名称或位置 service 操作服务的（启动、停止、重启）#service 服务名 start/stop/restart 服务名必须存在在/etc/init.d目录下 除了service指令操作服务，还可以 #/etc/init.d/服务名 start/stop/restart grep 搜索、过滤对文件/内容进行筛选，选出需要的内容 #grep [选项] 关键词 文件路径/内容 #grep “admin” php.txt //查询php.txt的admin -v ：排除 #grep -v “admin” php.txt //查询php.txt的所有除了admin -e ：extension 多条件筛选 #grep -e “条件1|条件2|条件3” 文件路径或内容“|”表示or egrep 等价于 grep -e wc word count,统计文件的各项数值(行、单词数、字节数) #wc -lwc 文档的路径 -l : line,行数 -w ：word ，单词数 -c :byte，字节 注 lwc选项的顺序，不影响其指令输出的结果的顺序，其结果顺序一定是行、单词数、字节数 管道 | 辅助作用，能够将多个指令合在一行上进行操作。 主要用在搜索、过滤上。管道的核心理解概念，管道前面指令的输出其实就是管道后面指令的输入 #指令1（必须在终端中有输出内容的指令） | 指令2（必须要求有输入的指令，有读取文件内容的需求） #rpm -qa | grep jdk ls ./ | wc 6) man manual（操作说明），进入man命令 代号 代表内容 1 用户在shell环境中可以操作的命令或可执行文件 5 配置文件或者某些文件的格式 8 系统管理员可用的管理命令 vim编辑器Vim 重点是光标的移动，模式切换，删除，查找，替换，复制，粘贴，撤销命令的使用 1） 三种模式 ​ 命令模式：输入命令进行操作（删除行，复制行，移动光标，粘贴）默认进入 ​ 编辑模式：对文件内容进行编辑 ​ 末行模式：输入命令对文件进行操作（搜索、替换、保存、退出、撤销、高亮） 2）Vim 打开文件 ​ #vim 文件路径 打开指定文件（文件不存在即新建） ​ #vim 数字 文件路径 打开指定文件，并且将光标移动到指定行 ​ #vim +/关键字 文件路径 打开指定文件，并高亮关键字 3）命令模式 3.1 光标移动 光标移动到行首 ^ (shift + 6) 光标移动到行尾$ (shift +4) 光标移动到首行的行首 gg 光标移动到末行的行首 G 翻屏 向上翻屏 ctrl +b （before）或 Pgup 向下翻屏 ctrl + f (after) 或 PgDn 快速定位到指定行 数字 + G 3.2 复制操作 复制光标所在行 yy 粘贴：p在当前光标的下一行 P在当前光标的上一行 以光标所在行为准（包括当前行），向下复制指定行数 数字 + yy 3.3 剪切/删除 剪切/删除 光标所在行 dd (删除之后下一行上移，dd严格上是剪切指令，剪切后不粘贴即删除) 以光标所在行为准（包括当前行），向下剪切指定行数 数字 + dd 剪切/删除 光标所在行 D (删除之后下一行不上移） 3.4 撤销、恢复 撤销 :u (末行模式命令) 或 u (undo) 恢复 ctrl + r 恢复（取消）之前的撤销操作(redo) 4）末行模式 进入方式 : 或者 /(表示查找) 保存 :w (write) 另存 :w 路径 保存退出 :wq 不保存退出 :q! 搜索/查找 /关键字 再按下回车 下一个 n 上一个N(next)。 取消高亮 :nohl(nohighlight) 替换 - :s/搜索的关键词/新的内容 替换光标所在行的第一处符合条件的内容 - :s/搜索的关键词/新的内容/g 替换光标所在行的全部符合条件的内容 - :%s/搜索的关键词/新的内容 替换所有行的第一个符合条件的内容 - :%s/搜索的关键词/新的内容 替换所有行的所有符合条件的内容 - % 表示整个文件 g 表示全局 显示行号(临时) :set nu 要想永久显示行号，需要进行对vim的配置。建议创建文件”~/.vimrc” 1set nu 取消行号 :set nonu 5）编辑模式 i (insert) a (after) 6）异常退出 编辑完后，并没有正常的保存退出，而突然关闭终端或断电 .swp 交换文件（临时） 只需删除交换文件，即可解决异常退出问题 用户与用户组1.用户1.1 三个文件 /etc/passwd 存储用户的关键信息 /etc/group 存储用户组的关键信息 /etc/shadow 存储用户的密码信息 1.2 添加用户 #useradd 选项 用户名 -g 表示指定用户的用户组（主组），选项的值可以是用户组的id，也可以是组名 -G 表示指定用户的附加组（额外），选项的值可以是用户组的id，也可以是组名 -u uid，用户的指定id，类似于qq自选靓号 -c comment，添加注释 -s 指定用户登录后所使用的shell解释器 【专门的接待员】 在不添加选项时，执行useradd之后会执行一系列操作 1、创建同名家目录2、创建同名的用户组 查看主组 查看passwd文件 ，查看附加组查看 group文件。主组有且只有一个，必须有，附加组可以有多个。 1.3 修改用户 #usermod 选项 用户名 (modify 修改) -g 指定用户的主组，选项的值可以是UID，也可以是组名 -G 指定用户的用户附加组，选项的值可以是GID，也可以是组名 -u 指定的用户的id -l 修改用户名 将用户zhangsan 改成 wangerma # usermod -l wangerma zhangsan -d &lt;登入目录&gt; 修改用户登入时的目录 -s修改用户登入后的shell 1.4 设置密码 linux不允许没有密码的用户登录到系统，无密码处于锁定状态，需要设置密码才能登录计算机 #passwd [用户名] [不指定用户则修改自己的密码] 1.5 切换用户 1su 用户名 （switch user用户名不指定默认root） 1.6 删除用户 #userdel [选项] 用户名 -r 删除用户时同时删除用户的家目录 2. 用户组2.1 每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理，用户组的挂你设计用户组的添加、删除和修改。组的添加、删除和修改实际上是/etc/group 文件。但不能通过只修改这个文件，来修改用户组，因为还涉及到其他文件，需要通过命令进行用户组变化的实现 2.2 用户组添加 12#groupadd 选项 用户组名-g 类似于用户添加里的 &quot;-u&quot;，-g表示选择自己设置一个自定义的用户组ID数字，","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"Linux文件种类和拓展名","slug":"Linux文件种类和拓展名","date":"2017-06-14T06:50:27.000Z","updated":"2019-12-30T06:51:41.939Z","comments":true,"path":"2017/06/14/Linux文件种类和拓展名/","link":"","permalink":"http://yoursite.com/2017/06/14/Linux%E6%96%87%E4%BB%B6%E7%A7%8D%E7%B1%BB%E5%92%8C%E6%8B%93%E5%B1%95%E5%90%8D/","excerpt":"","text":"Linux 文件种类和拓展名 普通文件 regular file 纯文本文件ASC11 二进制文件Binaty 数据格式文件 目录 directory 第一个属性是[d] 连接文件 类似于win下面的快捷方式，第一个属性是[l] 设备与设备文件 device 123块(block)设备文件: 存储数据，提供系统随机访问的接口设备，例如硬盘软盘，可以随机的在硬盘的不同块上读写，第一个属性是[b]字符(character)设备文件：一些串行端口的接口设备，键盘、鼠标等。特征就是“一次性读取”，不能够截断输出，例如不可以让你的鼠标“跳到”另一个界面，而是滑动到另一个地方，第一个属性是[c]套接字(sockets) 通常被用在网络上的数据连接。我么可以启动一个程序来监听客户端的请求，而客户端就可以通过这个socket来进行数据的通信。其第一个属性是[s], 管道（FIFO） 12FIFO是一种特殊的文件类型，它主要的目的在解决多个程序同时访问一个文件所造成的错误问题。FIFO即 First in First Out，第一个属性为[p] Linux文件扩展名 12345基本上Linux文件没有所谓的“拓展名”，一个Linux 文件能不能被执行，与它的第一列的10个属性有关，与文件名无关，有x即代表可被执行虽然拓展名无用，通常会采用一些适当的拓展名来表示文件的种类*.sh : 脚本或批处理文件(scripts)*.Z、*.tar、*.tar.gz、*.zip、*.tgz： 经过打包的压缩文件，不同的压缩文件*.html、*.php ：网页相关文件","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]}]}