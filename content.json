{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"书单","date":"2019-12-26T14:47:47.704Z","updated":"2019-12-26T03:10:47.277Z","comments":false,"path":"books/index.html","permalink":"http://yoursite.com/books/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-12-27T03:42:43.000Z","updated":"2019-12-27T04:17:55.884Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-12-26T14:46:39.745Z","updated":"2019-12-26T03:10:47.277Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-12-27T02:30:24.000Z","updated":"2019-12-27T04:17:03.940Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2019-12-27T04:28:53.000Z","updated":"2019-12-27T12:01:07.161Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"printf(\" Hello World!\")","slug":"helloworld-md","date":"2019-12-27T02:50:39.000Z","updated":"2019-12-27T02:58:49.782Z","comments":true,"path":"2019/12/27/helloworld-md/","link":"","permalink":"http://yoursite.com/2019/12/27/helloworld-md/","excerpt":"","text":"填补上空白区域，使函数输出 hello world1234if( ? ) printf(&quot;hello&quot;);else printf(&quot;world&quot;); 解决思路 if分支只能执行一条 printf函数返回值为输出字符的数目 在if()内部利用printf()输出，条件语句为0（假），执行else语句 具体方法1、 if(!(printf(&quot;Hello&quot;)))2、 if(printf(&quot;Hello &quot;)！=6)","categories":[],"tags":[{"name":"C/C++","slug":"C-C","permalink":"http://yoursite.com/tags/C-C/"},{"name":"语法","slug":"语法","permalink":"http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"}]},{"title":"tmux","slug":"tmux","date":"2018-12-30T02:07:47.000Z","updated":"2019-12-30T06:46:26.728Z","comments":true,"path":"2018/12/30/tmux/","link":"","permalink":"http://yoursite.com/2018/12/30/tmux/","excerpt":"","text":"tmux 技巧与调整tmux 技巧与调整 ubuntu 下安装 1sudo apt-get tmux window 窗口 -c -new a window -&amp; -close current window -l -switch to last window -n -next window -p -previous window -w -show window menu list pane 窗格 -% -horizontal split 水平分屏 -“ - -x -close current pane -; -switch to last pane -o -move clockwise 逆时针切换窗格 C-o swap pane clockwise 逆时针切换窗格 configuration 1 tumx的配置文件 每当开启一个新的会话时，Tmux 都会先读取 ~/.tmux.conf 这个文件。该文件中存放的就是对 Tmux 的配置。 小提示：如果你希望新的配置项能够立即生效，那么你可以将下面这一行配置加入到文件~/.tmux.conf 中。 12# bind a reload keybind R source-file ~&#x2F;.tmux.conf ; display-message &quot;Config reloaded..&quot; 这样配置了之后，每当向 ~/.tmux.conf 文件中添加了新的配置，只需要按下 Ctrl-b r就可以重新加载配置并使新的配置生效，从而免去了开启一个新的会话。 4.2 tmux常用配置 123456789101112~&#x2F;.tmux.conf 文件中。# set new default prefix 修改主键(ctrl + c -&gt; ctrl +j)unbind C-bset-option -g prefix C-j#mouse 用鼠标切换窗格set-option -g -q mouse on#easy split pane commands 分割窗口按键bind h split-window -hbind v split-window -vunbind &#39;&quot;&#39;unbind % Tmux 中的复制粘贴及鼠标操作 5.1 仅开启鼠标支持 在.tmux.conf 中添加一行配置。 12#开启鼠标支持set-option -g mouse on 复制 按住shift键,然后拖动鼠标复制要选择的内容，然后按下shift+ctrl+c,复制到系统剪贴板 粘贴 按下shift+ctrl+v 粘贴系统剪贴板中的内容到tmux中 需要注意的是 shift+ctrl+v是在终端设置的粘贴快捷键 shift+ctrl+c是在终端设置的复制快捷键 5.2 如果想将在 Tmux 中发挥鼠标的威力，最好先将下面的设置打开: set -g mouse-resize-pane on set -g mouse-select-pane on set -g mouse-select-window on set -g mode-mouse on以上设置，将允许用鼠标选择面板、窗口，并允许手动修改面板的大小。其中最后一条命令，允许利用鼠标进入 cope-mode，可以直接在 tmux 中滚动历史，并选择文本将其复制到 tmux 的缓冲区中。当想要在其他面板或窗口中复制这段文本时，只需要使用复制命令 bindkey p 即可。这样，基本上 Tmux 内部的复制粘贴就都可以搞定。 这里有一个 trick，那就是在 tmux 中不论选择还是复制时，都按住 Shift 键，你会发现熟悉的中键又回来了 :-) 此外，还可以使用 Shift+Insert 快捷键将系统剪切板中的内容输入 tmux 中。 相对于 tmux 原生的选择模式（不加 shift 键），使用系统选择有个缺陷，即当一行内存在多个面板时，无法选择单个面板中的内容，这时就必须使用 tmux 自带的复制粘贴系统了。 参考连接木子三斤的blog","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"tmux","slug":"tmux","permalink":"http://yoursite.com/tags/tmux/"}]},{"title":"mosh","slug":"mosh","date":"2018-11-30T06:44:38.000Z","updated":"2019-12-30T06:46:03.056Z","comments":true,"path":"2018/11/30/mosh/","link":"","permalink":"http://yoursite.com/2018/11/30/mosh/","excerpt":"","text":"mosh1. mosh安装(ubuntu)12 sudo apt-get updatesudo apt-get install mosh 2.mosh 连接mosh 使用的UDP协议连接，使用的端口是从60000到61000 3. mosh的主要特点mosh是基于新的State Synchronization Protocol（SSP）协议，运行在UDP上，能同步不同主机对象的状态，加密和认证使用AES-128。当客户在WiFi网络中漫游或切换到3G网络，mosh能保持连接不断，在输入和删除命令时它能即时反馈，不会出现恼人的延迟 在高延迟的网络下，mosh比ssh流畅多了，而且在3G网络下，丢失网络变更IP后，终端连接不会中断。另外，mosh对编码的转换上，比其他终端有不少优势。","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"mosh","slug":"mosh","permalink":"http://yoursite.com/tags/mosh/"}]},{"title":"网络基础","slug":"net","date":"2018-09-30T06:46:38.000Z","updated":"2019-12-30T06:49:31.986Z","comments":true,"path":"2018/09/30/net/","link":"","permalink":"http://yoursite.com/2018/09/30/net/","excerpt":"","text":"网络1. 网络 以太网(Ethernet)计算机局域网络技术，目前应用最广。 2. 计算机网络的组成组件 节点 (node)：节点主要是具有网络地址(IP)的设备的统称 服务器主机(server)：就网络连接的方向来说，提供数据以“响应”给用户的主机，都可以被称为是一台服务器。 工作站(workstation)或客户端(client)：任何可以在计算机网络上输入的设备都可以是工作站，以连接发起的方向来说，主动发起连接去“请求”数据的，就可以称为客户端(client) 网卡(network interface card,NIC) 内置或外接在主机上面的一个设备，主要用于网络连接 网络接口： 利用软件设计出来的网络接口，主要是提供网络地址(ip)的任务。 网络形态或拓扑(topology)：各个节点在网络上的链接方式，一般讲的是物理连接方式 网关(gateway)：具有两个以上的网络接口，可以连接两个以上不同网段的设备 3. OSI七层协议 接收端和发送端，每一层只认识对方的同一层次的数据 传送过程 用户通过应用程序将数据放入第七层的包裹，再将第七层的包裹放到第六层的包裹内，依序一直放到第一层的最大的包裹内，然后传送出去给接收端。接收端的主机就得由第一个包裹开始，依序将每个包裹拆开，然后一个一个交给对应负责的层次来查看 包裹表面包含来自哪里、要去哪里、接受者是谁；包裹里面是真正的数据 OSI七层协议为一个网络模型(model)，并非硬性规定。这个七层协议可以协助软硬件开发简历一个基本的准则，且每一分层各自独立，方便开发者使用。 数据链路层里最重要的信息为MAC(Media Access Control)","categories":[{"name":"网络","slug":"网络","permalink":"http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"网络","slug":"网络","permalink":"http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"}]},{"title":"C语言内存分区和变量属性","slug":"memorypartition","date":"2018-03-20T12:25:11.000Z","updated":"2019-12-27T11:41:32.943Z","comments":true,"path":"2018/03/20/memorypartition/","link":"","permalink":"http://yoursite.com/2018/03/20/memorypartition/","excerpt":"","text":"C语言内存分区 代码区 data （全局初始化、静态初始化、常量） Bss（未初始化数据区） 栈区 堆区 ——- ## 变量的属性 ### 1、变量的分类 1234567891011121314151617181920212223242526272829根据作用域：可分为全局变量和局部变量。根据生存周期：可分为静态存储方式和动态存储方式，具体地又分为自动的（auto）、静态的（static）、寄存器的（register）、外部的（extern）注、静态存储方式是指在程序运行期间分配固定的存储空间的方式。 动态存储方式是在程序运行期间根据需要进行动态的分配存储空间的方式动态变量和静态变量的区别：1、存储位置动态变量：存储在内存出栈数据区静态变量：存储在全局数据区（静态数据区）2、生命期动态变量：根据你定义的位置确定，比如你在一个函数中定义的，那么超出该函数范围变量将失效静态变量：程序结束时才释放3、作用域动态变量：同样的要根据你定义的位置才能确定，和第二点的一样静态变量：当前文件中有效 ### 2、变量的作用域和存储类别的关系 1234567891011每一个变量均有作用域和存储类别两个属性，这些属性共同用于描述一个变量，这些不同类型的变量与存储位置的关系如下：1、外部变量（全局变量）、静态外部变量、静态局部变量存储在静态存储区。2、自动局部变量（局部变量默认为自动局部变量）、函数形参存储在动态存储区（即栈区）。3、不论是静态存储区还是动态存储区均属于内存中的用户区。4、而寄存器变量是存储在CPU寄存器中的而不是内存中。 ### 3、与作用域相关的几个属性： 1234567局部变量：在一个函数内部定义的变量是内部变量，它只在本函数范围内有效，也就是说只有在本函数内才能使用它们，在此函数以外是不能使用这些变量的，这种类型的变量就称为“局部变量”。全局变量：在函数外定义的变量，可以为本源文件中其它函数所公用，有效范围为从定义变量的位置开始到本源文件结束，这种类型的变量就称为“全局变量”。 ### 4、与存储类型相关的几个属性： 1234567891011121314151617181920atuo：在声明局部变量时，若不指定 static，默认均是 auto，这类变量都是动态分配存储空间的，数据存储在动态存储区中。static：在声明局部变量时，使用关键字 static 将局部变量指定为“静态局部变量”，这样在函数调用结束后不消失而保留原值，即占用的存储单元不释放，在下一次函数调用时，该变量已有值就是上次函数调用结束时的值。register：在声明动态局部变量或者函数形参时，可将变量声明为register，这样编译系统就会为变量分配一个寄存器而不是内存空间，通过这种方式可提升对某些局部变量频繁调用的程序的性能。（寄存器运算速度远高于内存）extern：用于扩展全局变量的作用域。1)比如如果函数想引用一个外部变量，但该外部变量在该函数后定义，那么这个函数需要使用 extern 来声明变量，这样才能使用在该函数后面定义的全局变量。2)此外，extern 还可以在多文件的程序中声明外部变量。","categories":[{"name":"C语言","slug":"C语言","permalink":"http://yoursite.com/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C/C++","slug":"C-C","permalink":"http://yoursite.com/tags/C-C/"}]},{"title":"Markdown语法","slug":"languagemd","date":"2018-03-09T12:05:29.000Z","updated":"2019-12-27T12:37:37.277Z","comments":true,"path":"2018/03/09/languagemd/","link":"","permalink":"http://yoursite.com/2018/03/09/languagemd/","excerpt":"","text":"MARKDOWN语法一、标题#######一到六二、修辞与强调Some of these words are emphasized.//斜体Use two asterisks for strong emphasis.//加粗 三、列表 asd 项目 价格 收到 Computer $1600 sd Phone $12 Pipe $1 项目 价格 :——– ——–: Computer 1600 元 Phone 12 元 Pipe 1 元 1、asfa 2、asd 四、链接行内This is an example link. This is an example link. 参考I get 10 times more traffic from Google than fromYahoo or MSN. 五、图片CTRL+G 六、代码一个tab#include&lt;stdio.h&gt; int main() { int n;int i,sum=0; for(i=0;i&lt;3;i++) { scanf(&quot;%d&quot;,&amp;n); sum=sum+n; } printf(&quot;%.3f&quot;,sum/3.0); return 0; }三个反斜杠``代码高亮12345678910111213 #include&lt;stdio.h&gt; int main()&#123; int n;int i,sum&#x3D;0; for(i&#x3D;0;i&lt;3;i++) &#123; scanf(&quot;%d&quot;,&amp;n); sum&#x3D;sum+n; &#125; printf(&quot;%.3f&quot;,sum&#x2F;3.0); return 0; &#125;","categories":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/categories/Markdown/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"}]},{"title":"bash","slug":"bash","date":"2017-06-15T06:52:14.000Z","updated":"2019-12-30T06:58:18.751Z","comments":true,"path":"2017/06/15/bash/","link":"","permalink":"http://yoursite.com/2017/06/15/bash/","excerpt":"","text":"bash管理整个计算机硬件是操作系统的内核（Kernel）,内核需要保护，所以一般用户只能通过shell跟内核通信 1、shell通过shell将我们输入的命令与Kernel通信，让kernel控制硬件进行工作 1234例：当你需要计算机输出“音乐”时1、硬件： 需要你的硬件有“声卡芯片”2、内核管理：操作系统的内核可以支持整个芯片组，还需提供芯片的驱动程序3、应用程序： 用户输入发出声音的命令 2、bash shell history Tab alias job control foreground background shell script wildcard — 3、bash shell 的内置命令type通过type 命令可以知道命令是否为bash内置命令 1type name 4、shell的变量功能4.1 变量变量，让某一个特定的字符串代表不固定的内容，","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"-bash -shell","slug":"bash-shell","permalink":"http://yoursite.com/tags/bash-shell/"}]},{"title":"Linux-指令","slug":"Linux-指令","date":"2017-06-14T06:53:29.000Z","updated":"2019-12-30T06:57:46.486Z","comments":true,"path":"2017/06/14/Linux-指令/","link":"","permalink":"http://yoursite.com/2017/06/14/Linux-%E6%8C%87%E4%BB%A4/","excerpt":"","text":"linux 目录/bin:(binary) 存放二进制文件，给普通用户使用/sbin: shell bin 只能超级用户使用/etc: ()Linux 下所有配置文件,系统配置及用户安装的配置/home : 所有非root用户所有用户家目录的集合/root ：root用户的家目录/var:(variable 可变的) 存放日志文件，apache和nginx站点目录也会放在这个目录/usr: 用户自己安装的软件/boot: (boot 启动)linux引导启动时用到的一些文件/dev: (device设备)，光驱，U盘/lib: (library)/lost+found: 系统崩溃时的存放临时文件/proc :(process)过程进程/sys: (system)系统文件/temp: 临时文件 基本指令1)通用语法12$ 指令名称 【-选项】【操作目标】第一个被输入的数据绝对是命令或可执行文件 2)简单指令 ls指令 (list) ls [路径]列出指定路径下的文件夹和文件名称 clear == ctrl + l 清除屏幕中的命令 su 切换用户（用户名不写切换到root） cd change directory cd [路径] 绝对或相对路径 cd 切换到当前用户的家目录 pwd print working directory 3)文档操作指令 touch 文件的名字 路径 mkdir cp [-r] 需要复制的文档 需要保存的位置 -r 表示递归 mv 移动、剪切、重命名 mv 需要操作的文档 新的文档的位置 不需要 -r rm [-rf] 需要删除的文档 -r 表示递归 -f 表示强制 4）文档查看指令 tail (尾巴) 查看一个文件末多少行 tail -n 文件路径 -n不写 默认表示10行 head (头)查看一个文件头多少行 head -n 文件路径 -n不写 默认表示10行 cat 将内容全部输出到命令行中[正序] cat 文件路径1 文件路径2 文件路径3 tac 查看某文件的全部内容(倒序) tac 文件路径1 文件路径2 文件路径3 vim 打开文件，显示内容 vim 文件路径 5)关机 重启指令 sync 数据同步写入磁盘 reboot 重启计算机 普通用户无法执行 shutdown -h 时间now：立即关进 +m： (m表示minutes) halt 关闭内存 进阶指令 du (directory used) 显示出目录所占的磁盘空间大小情况；du -sh 目录路径 -s :表示sumary 汇总统计 -h：表示以较高可读性的形式显示 df (disk free),查看磁盘的剩余空间的情况。-h表示以较高可读性的形式显示 free 查看内存的使用情况。 free -m total :总计内存 used:已用内存 free：空闲 内存 share：共享内存 缓冲内存和缓存内存 find 根据条件查询文档的所在位置 #find 范围 选项 选项的值 -name ： 根据名字进行查询。支持通配符 * ,进行模糊查询 -type ： 根据文档的类型进行查询[d 表示文件夹，f表示普通文件，s表示套接字(sockets)，l表示连接文件(link快捷方式),c表示字符设备文件(character),b表示块状设备文件(block)] -user： 根据所有者进行查询 -group：根据所属的用户组 -size ：根据大小进行查询 ps (process show)查看进程 ps -ef -e ： 等价于 -A，all，全部 -f ：表示full，显示全部的列 UID： 进程的启动用户名 PID：process id进程的id PPID : parent process id 父级进程 C：表示cpu的使用情况STIME： start time 启动时间 TTY：终端的设备编号，”?”表示进程不是由终端发起的 TIME: 持续运行时间 CMD： command ,显示进程的名称或位置 service 操作服务的（启动、停止、重启）#service 服务名 start/stop/restart 服务名必须存在在/etc/init.d目录下 除了service指令操作服务，还可以 #/etc/init.d/服务名 start/stop/restart grep 搜索、过滤对文件/内容进行筛选，选出需要的内容 #grep [选项] 关键词 文件路径/内容 #grep “admin” php.txt //查询php.txt的admin -v ：排除 #grep -v “admin” php.txt //查询php.txt的所有除了admin -e ：extension 多条件筛选 #grep -e “条件1|条件2|条件3” 文件路径或内容“|”表示or egrep 等价于 grep -e wc word count,统计文件的各项数值(行、单词数、字节数) #wc -lwc 文档的路径 -l : line,行数 -w ：word ，单词数 -c :byte，字节 管道6) man manual（操作说明），进入man命令 代号 代表内容 1 用户在shell环境中可以操作的命令或可执行文件 5 配置文件或者某些文件的格式 8 系统管理员可用的管理命令","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"Linux文件种类和拓展名","slug":"Linux文件种类和拓展名","date":"2017-06-14T06:50:27.000Z","updated":"2019-12-30T06:51:41.939Z","comments":true,"path":"2017/06/14/Linux文件种类和拓展名/","link":"","permalink":"http://yoursite.com/2017/06/14/Linux%E6%96%87%E4%BB%B6%E7%A7%8D%E7%B1%BB%E5%92%8C%E6%8B%93%E5%B1%95%E5%90%8D/","excerpt":"","text":"Linux 文件种类和拓展名 普通文件 regular file 纯文本文件ASC11 二进制文件Binaty 数据格式文件 目录 directory 第一个属性是[d] 连接文件 类似于win下面的快捷方式，第一个属性是[l] 设备与设备文件 device 123块(block)设备文件: 存储数据，提供系统随机访问的接口设备，例如硬盘软盘，可以随机的在硬盘的不同块上读写，第一个属性是[b]字符(character)设备文件：一些串行端口的接口设备，键盘、鼠标等。特征就是“一次性读取”，不能够截断输出，例如不可以让你的鼠标“跳到”另一个界面，而是滑动到另一个地方，第一个属性是[c]套接字(sockets) 通常被用在网络上的数据连接。我么可以启动一个程序来监听客户端的请求，而客户端就可以通过这个socket来进行数据的通信。其第一个属性是[s], 管道（FIFO） 12FIFO是一种特殊的文件类型，它主要的目的在解决多个程序同时访问一个文件所造成的错误问题。FIFO即 First in First Out，第一个属性为[p] Linux文件扩展名 12345基本上Linux文件没有所谓的“拓展名”，一个Linux 文件能不能被执行，与它的第一列的10个属性有关，与文件名无关，有x即代表可被执行虽然拓展名无用，通常会采用一些适当的拓展名来表示文件的种类*.sh : 脚本或批处理文件(scripts)*.Z、*.tar、*.tar.gz、*.zip、*.tgz： 经过打包的压缩文件，不同的压缩文件*.html、*.php ：网页相关文件","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]}]}