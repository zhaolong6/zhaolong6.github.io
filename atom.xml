<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-27T02:58:49.782Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>printf(&quot; Hello World!&quot;)</title>
    <link href="http://yoursite.com/2019/12/27/helloworld-md/"/>
    <id>http://yoursite.com/2019/12/27/helloworld-md/</id>
    <published>2019-12-27T02:50:39.000Z</published>
    <updated>2019-12-27T02:58:49.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="填补上空白区域，使函数输出-hello-world"><a href="#填补上空白区域，使函数输出-hello-world" class="headerlink" title="填补上空白区域，使函数输出 hello world"></a>填补上空白区域，使函数输出 hello world</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(  ?  )</span><br><span class="line">printf(&quot;hello&quot;);</span><br><span class="line">else</span><br><span class="line">printf(&quot;world&quot;);</span><br></pre></td></tr></table></figure><h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><ul><li>if分支只能执行一条</li><li>printf函数返回值为输出字符的数目</li><li>在if()内部利用printf()输出，条件语句为0（假），执行else语句</li></ul><h4 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h4><p>1、</p><pre><code>if(!(printf(&quot;Hello&quot;)))</code></pre><p>2、</p><pre><code>if(printf(&quot;Hello &quot;)！=6)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;填补上空白区域，使函数输出-hello-world&quot;&gt;&lt;a href=&quot;#填补上空白区域，使函数输出-hello-world&quot; class=&quot;headerlink&quot; title=&quot;填补上空白区域，使函数输出 hello world&quot;&gt;&lt;/a&gt;填补上空白区域，使函数
      
    
    </summary>
    
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C语言内存分区和变量属性</title>
    <link href="http://yoursite.com/2018/03/20/memorypartition/"/>
    <id>http://yoursite.com/2018/03/20/memorypartition/</id>
    <published>2018-03-20T12:25:11.000Z</published>
    <updated>2019-12-27T11:41:32.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C语言内存分区"><a href="#C语言内存分区" class="headerlink" title="C语言内存分区"></a>C语言内存分区</h2><table><thead><tr><th>代码区</th><th>data （全局初始化、静态初始化、常量）</th><th>Bss（未初始化数据区）</th></tr></thead><tbody><tr><td>栈区</td><td>堆区</td><td></td></tr><tr><td>——-</td><td></td><td></td></tr><tr><td>## 变量的属性</td><td></td><td></td></tr><tr><td>### 1、变量的分类</td><td></td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">根据作用域：可分为全局变量和局部变量。</span><br><span class="line"></span><br><span class="line">根据生存周期：可分为静态存储方式和动态存储方式，具体地又分为自动</span><br><span class="line">的（auto）、静态的（static）、寄存器的（register）、外部的</span><br><span class="line">（extern）</span><br><span class="line"></span><br><span class="line">注、静态存储方式是指在程序运行期间分配固定的存储空间的方式。</span><br><span class="line">   动态存储方式是在程序运行期间根据需要进行动态的分配存储空间的方</span><br><span class="line">式</span><br><span class="line">动态变量和静态变量的区别：</span><br><span class="line"></span><br><span class="line">1、存储位置</span><br><span class="line"></span><br><span class="line">动态变量：存储在内存出栈数据区</span><br><span class="line"></span><br><span class="line">静态变量：存储在全局数据区（静态数据区）</span><br><span class="line"></span><br><span class="line">2、生命期</span><br><span class="line"></span><br><span class="line">动态变量：根据你定义的位置确定，比如你在一个函数中定义的，那么超出</span><br><span class="line">该函数范围变量将失效</span><br><span class="line"></span><br><span class="line">静态变量：程序结束时才释放</span><br><span class="line"></span><br><span class="line">3、作用域</span><br><span class="line"></span><br><span class="line">动态变量：同样的要根据你定义的位置才能确定，和第二点的一样</span><br><span class="line"></span><br><span class="line">静态变量：当前文件中有效</span><br></pre></td></tr></table></figure></td><td></td><td></td></tr><tr><td>### 2、变量的作用域和存储类别的关系</td><td></td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">每一个变量均有作用域和存储类别两个属性，这些属性共同用于描述一个变</span><br><span class="line">量，这些不同类型的变量与存储位置的关系如下：</span><br><span class="line"></span><br><span class="line">1、外部变量（全局变量）、静态外部变量、静态局部变量存储在静态存储</span><br><span class="line">区。</span><br><span class="line">2、自动局部变量（局部变量默认为自动局部变量）、函数形参存储在动态</span><br><span class="line">存储区（即栈区）。</span><br><span class="line"></span><br><span class="line">3、不论是静态存储区还是动态存储区均属于内存中的用户区。</span><br><span class="line"></span><br><span class="line">4、而寄存器变量是存储在CPU寄存器中的而不是内存中。</span><br></pre></td></tr></table></figure></td><td></td><td></td></tr><tr><td>### 3、与作用域相关的几个属性：</td><td></td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">局部变量：在一个函数内部定义的变量是内部变量，它只在本函数范围内有</span><br><span class="line">效，也就是说只有在本函数内才能使用它们，在此函数以外是不能使用这些</span><br><span class="line">变量的，这种类型的变量就称为“局部变量”。</span><br><span class="line"></span><br><span class="line">全局变量：在函数外定义的变量，可以为本源文件中其它函数所公用，有效</span><br><span class="line">范围为从定义变量的位置开始到本源文件结束，这种类型的变量就称为“全</span><br><span class="line">局变量”。</span><br></pre></td></tr></table></figure></td><td></td><td></td></tr><tr><td>### 4、与存储类型相关的几个属性：</td><td></td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">atuo：在声明局部变量时，若不指定 static，默认均是 auto，这类变量</span><br><span class="line">都是动态分配存储空间的，数据存储在动态存储区中。</span><br><span class="line"></span><br><span class="line">static：在声明局部变量时，使用关键字 static 将局部变量指定为“静</span><br><span class="line">态局部变量”，这样在函数调用结束后不消失而保留原值，即占用的存储单</span><br><span class="line">元不释放，在下一次函数调用时，该变量已有值就是上次函数调用结束时的</span><br><span class="line">值。</span><br><span class="line"></span><br><span class="line">register：在声明动态局部变量或者函数形参时，可将变量声明为</span><br><span class="line">register，这样编译系统就会为变量分配一个寄存器而不是内存空间，通</span><br><span class="line">过这种方式可提升对某些局部变量频繁调用的程序的性能。（寄存器运算速</span><br><span class="line">度远高于内存）</span><br><span class="line"></span><br><span class="line">extern：用于扩展全局变量的作用域。</span><br><span class="line"></span><br><span class="line">1)比如如果函数想引用一个外部变量，但该外部变量在该函数后定义，那么</span><br><span class="line">这个函数需要使用 extern 来声明变量，这样才能使用在该函数后面定义</span><br><span class="line">的全局变量。</span><br><span class="line"></span><br><span class="line">2)此外，extern 还可以在多文件的程序中声明外部变量。</span><br></pre></td></tr></table></figure></td><td></td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;C语言内存分区&quot;&gt;&lt;a href=&quot;#C语言内存分区&quot; class=&quot;headerlink&quot; title=&quot;C语言内存分区&quot;&gt;&lt;/a&gt;C语言内存分区&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码区&lt;/th&gt;
&lt;th&gt;data （全局初始化、静态初
      
    
    </summary>
    
    
      <category term="C语言" scheme="http://yoursite.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://yoursite.com/2018/03/09/languagemd/"/>
    <id>http://yoursite.com/2018/03/09/languagemd/</id>
    <published>2018-03-09T12:05:29.000Z</published>
    <updated>2019-12-27T11:35:01.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MARKDOWN语法"><a href="#MARKDOWN语法" class="headerlink" title="MARKDOWN语法"></a>MARKDOWN语法</h1><h4 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h4><pre><code>#######一到六</code></pre><h4 id="二、修辞与强调"><a href="#二、修辞与强调" class="headerlink" title="二、修辞与强调"></a>二、修辞与强调</h4><p>Some of these words  <em>are emphasized</em>.//<em>斜体</em><br>Use two asterisks for <strong>strong emphasis</strong>.//<strong>加粗</strong></p><hr><h4 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h4><ul><li>asd</li></ul><table><thead><tr><th>项目</th><th>价格</th><th>收到</th></tr></thead><tbody><tr><td>Computer</td><td>$1600</td><td>sd</td></tr><tr><td>Phone</td><td>$12</td><td></td></tr><tr><td>Pipe</td><td>$1</td><td></td></tr><tr><td></td><td>项目</td><td>价格</td></tr><tr><td></td><td>:——–</td><td>——–:</td></tr><tr><td></td><td>Computer</td><td>1600 元</td></tr><tr><td></td><td>Phone</td><td>12 元</td></tr><tr><td></td><td>Pipe</td><td>1 元</td></tr><tr><td>1、asfa</td><td></td><td></td></tr><tr><td>2、asd</td><td></td><td></td></tr></tbody></table><hr><h4 id="四、链接"><a href="#四、链接" class="headerlink" title="四、链接"></a>四、链接</h4><h6 id="行内"><a href="#行内" class="headerlink" title="行内"></a>行内</h6><p>This is an <a href="http://example.com/" target="_blank" rel="noopener">example link</a>.</p><p>This is an <a href="http://example.com/" target="_blank" rel="noopener" title="With a Title">example link</a>.</p><h6 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h6><p>I get 10 times more traffic from <a href="http://google.com/" target="_blank" rel="noopener" title="Google">Google</a> than from<br><a href="http://search.yahoo.com/" target="_blank" rel="noopener" title="Yahoo Search">Yahoo</a> or <a href="http://search.msn.com/" target="_blank" rel="noopener" title="MSN Search">MSN</a>.</p><h4 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h4><h6 id="CTRL-G"><a href="#CTRL-G" class="headerlink" title="CTRL+G"></a>CTRL+G</h6><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctYmxvZy5jc2RuLm5ldC8yMDE4MDMxOTE5NTIwOTI5MT93YXRlcm1hcmsvMi90ZXh0L0x5OWliRzluTG1OelpHNHVibVYwTDNscGMyaGxibWRqYUdsNmFHRT0vZm9udC81YTZMNUwyVC9mb250c2l6ZS80MDAvZmlsbC9JMEpCUWtGQ01BPT0vZGlzc29sdmUvNzA?x-oss-process=image/format,png" alt="这里写图片描述"></p><h4 id="六、代码"><a href="#六、代码" class="headerlink" title="六、代码"></a>六、代码</h4><h6 id="一个tab"><a href="#一个tab" class="headerlink" title="一个tab"></a>一个tab</h6><pre><code>#include&lt;stdio.h&gt; int main(){     int n;int i,sum=0; for(i=0;i&lt;3;i++) {     scanf(&quot;%d&quot;,&amp;n);         sum=sum+n;  }  printf(&quot;%.3f&quot;,sum/3.0);return 0;   }</code></pre><h5 id="三个反斜杠-代码高亮"><a href="#三个反斜杠-代码高亮" class="headerlink" title="三个反斜杠``代码高亮"></a>三个反斜杠``代码高亮</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   #include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n;int i,sum&#x3D;0;</span><br><span class="line"> for(i&#x3D;0;i&lt;3;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line"> sum&#x3D;sum+n;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  printf(&quot;%.3f&quot;,sum&#x2F;3.0);</span><br><span class="line">   return 0;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MARKDOWN语法&quot;&gt;&lt;a href=&quot;#MARKDOWN语法&quot; class=&quot;headerlink&quot; title=&quot;MARKDOWN语法&quot;&gt;&lt;/a&gt;MARKDOWN语法&lt;/h1&gt;&lt;h4 id=&quot;一、标题&quot;&gt;&lt;a href=&quot;#一、标题&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Markdown" scheme="http://yoursite.com/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
